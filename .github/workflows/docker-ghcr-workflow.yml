name: Docker Ghcr Workflow


on:
  push:
    branches: 
    - main
    tags: none # [ 'v*.*.*' ]
  pull_request:
    branches:
    - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  #IMAGE_NAME: houssemdellai/github-actions-course 
  IMAGE_NAME: ${{ github.repository }} # returns HoussemDellai/github-actions-course : problem with uppercase
  IMAGE_TAG: 1.0.${{ github.run_number }}


jobs:
  build-push-docker:
    runs-on: "k8s-gha-runner"
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4.1.1

    - name: Install cosign
      if: github.event_name != 'pull_request'
      uses: sigstore/cosign-installer@v3.0.2
      #with:
      #  cosign-release: 'v3.4.0'

    - name: Check install!
      run: cosign version    

    - name: Setup Docker buildx
      uses: docker/setup-buildx-action@v1

    - name: Log into registry ${{ env.REGISTRY }}
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v1
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@v5
      with:
        context: 03-app-dotnet
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} 
        labels: ${{ steps.meta.outputs.labels }}

    - name: Create the signing keypair
      if: ${{ github.event_name != 'pull_request' }}
      run: cosign generate-key-pair > ${{ secrets.SIGNING_SECRET }} 
      
    - name: Write the signing key to disk 
      run: echo "${{ secrets.SIGNING_SECRET }}" > cosign.key  
   
    - name: Sign the published Docker image
      if: ${{ github.event_name != 'pull_request' }}
      env:
        COSIGN_EXPERIMENTAL: "true"
      run: cosign sign --key cosign.key ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}